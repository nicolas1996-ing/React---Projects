{"version":3,"sources":["categories/AddCategory.js","categories/GifGridItem.js","helpers/getGifs.js","categories/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","console","log","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2MAKaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,cAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAqBA,OACI,mCACI,sBAAMC,SAZO,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,KAElBO,QAAQC,IAAI,kBAKR,SAEI,uBACIC,KAAK,OACLC,MAAOX,EACPY,SAxBU,SAACT,GAEvBK,QAAQC,IAAIN,EAAEU,OAAOF,OACrBV,EAAcE,EAAEU,OAAOF,e,QCZlBG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAGrC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCJVK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACNN,EADM,iDAC0CO,UAAUF,GADpD,+DAEOG,MAAMR,GAFb,cAENS,EAFM,gBAGYA,EAAKC,OAHjB,uBAGJC,EAHI,EAGJA,KAIFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAX9B,kBAiBLY,GAjBK,4CAAH,sDAoBER,IClBFa,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAgBtB,EChBwB,SAACA,GACzB,MAA0BvB,mBAAS,CAC/B6B,KAAM,GACNO,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNjB,EAAQC,GACHiB,MAAK,SAAAC,GACFH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAGtB,CAACb,IAEGc,EDA2BK,CAAanB,GAAjCU,EAAd,EAAQJ,KAAcO,EAAtB,EAAsBA,QAMtB,OACI,qCACI,6BAAKb,IAGJa,EAAU,mBAAGjB,UAAU,mCAAb,2BAAoE,KAE/E,qBAAKA,UAAU,YAAf,SAGQc,EAAOF,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIhB,aElCxB2B,EAAe,WAGxB,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAUA,OACI,qCACI,8CAGA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBAIA,6BAMQS,EAAWuB,KAAI,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,YClCjCqB,IAASC,OACP,cAAE,EAAF,IACAC,SAASC,eAAe,W","file":"static/js/main.b6716f76.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('Hola mundo'); // hook \r\n\r\n    // función que se invoca cuando el valor del input se actuliza\r\n    // cuando se escribe sobre el input \r\n    const handleInputChange = (e) => {\r\n        // atulizar el valor de inputValue por medio del setInputValue \r\n        console.log(e.target.value); // lo que se recibe \r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    // función para el submit del formulario \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); // config\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(categories => [inputValue, ...categories]); // actulizar lista de categ\r\n            setInputValue(''); // actulizar el valor del input \r\n        }\r\n        console.log('submit done !');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange}\r\n                >\r\n\r\n                </input>\r\n\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n    // console.log({ id, title, url });\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__wobble\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","// funciones que pueden ser re utilizadas\r\n// una función async retorna una promesa\r\n\r\n\r\nconst getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=j7oMU7ONZhAzrtiSVxnqjRMWA9DRoF29`\r\n    const resp = await fetch(url);\r\n    const { data } = await (resp.json()); // filtrar data \r\n\r\n    // limpiar data \r\n    // retorna un arreglo de objetos\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n\r\n    // console.log(gifs);\r\n    return gifs;\r\n}\r\n\r\nexport default getGifs;","// import React, { useState, useEffect } from 'react'\r\n// import getGifs from '../helpers/getGifs' // función para hacer fetch a giphy \r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nimport { useFetchGifs } from \"../hooks/useFetchGif\"\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\n    // permite que la función solo se ejecute una vez cuando se carga el doc\r\n    // no se hace la petición cada vez que se detecte un evento \r\n    // llama a la función al inicio del renderizado y no la vuelve a llamar \r\n\r\n    // --------------------------------fecth--------------------------------\r\n    // const [images, setImages] = useState([])\r\n    // useEffect(() => {\r\n    //     // retorna una promesa\r\n    //     getGifs(category)\r\n    //         .then(imgs => setImages(imgs)); // almacena resultado \r\n    // }, [category])\r\n\r\n    // -----------------------------custom hook----------------------------- \r\n    const { data: images, loading } = useFetchGifs(category);\r\n    // console.log(images);\r\n    // console.log(loading);\r\n\r\n\r\n    // getGifs();\r\n    return (\r\n        <>\r\n            <h2>{category}</h2>\r\n\r\n            {/* custom hook */}\r\n            {loading ? <p className=\"animate__animated animate__flash\">'Loading ...'</p> : null}\r\n\r\n            <div className='card-grid'>\r\n\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n\r\n                {/* llamada al componente */}\r\n                {/* ejemplo 1 */}\r\n                {/* {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                } */}\r\n\r\n\r\n\r\n                {/* ejemplo 2 */}\r\n                {/* lista de elementos por categoria\r\n            <ol>\r\n                {\r\n                    images.map(img => (\r\n                        <li key={img.id}>{img.title}</li>\r\n\r\n                    ))\r\n                }\r\n            </ol> */}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","// hooks : funciones \r\nimport { useState, useEffect } from 'react';\r\nimport getGifs from '../helpers/getGifs' // función para hacer fetch a giphy \r\n\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [category])\r\n\r\n    return state; // {data : [], loading : true}\r\n\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './categories/AddCategory';\r\nimport { GifGrid } from './categories/GifGrid';\r\n\r\n// componente principal \r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    // hook\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () => {\r\n    //     const newCateg = 'x-men';\r\n    //     // setCategories([...categories, newCateg]); // forma 1\r\n\r\n    //     // forma 2\r\n    //     setCategories(cat => [...cat, newCateg]); // forma 2\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n\r\n            {/* invocar el componente AddCategory y enviar atributos por el prop */}\r\n            <AddCategory setCategories={setCategories} />\r\n\r\n            <hr></hr>\r\n            {/* <button onClick={handleAdd} >Agregar</button> */}\r\n\r\n            {/* lista de categorias */}\r\n            <ol>\r\n                {\r\n                    // categories.map(category => {\r\n                    //     return <li key={category}>{category}</li>\r\n                    // })\r\n\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\nReactDOM.render(\n  < GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}